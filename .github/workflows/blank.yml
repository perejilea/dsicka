name: "[MSX] Backup Codespace to MEGA"

on:
  push:
    paths:
      - 'backup/**'
  schedule:
    - cron: '0 0,6,12,18 * * *'
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo + LFS
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Crear archivo comprimido con timestamp
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          BACKUP_FILENAME="MSX-Backup_$TIMESTAMP.tar.gz"
          echo "BACKUP_FILENAME=$BACKUP_FILENAME" >> $GITHUB_ENV
          tar -czf "$BACKUP_FILENAME" backup/ || [[ $? -eq 0 || $? -eq 1 || $? -eq 2 ]]

      - name: Instalar MEGAcmd (M√©todo definitivo corregido)
        run: |
          sudo apt-get update
          # Instalar la dependencia faltante (libfuse2 se llama libfuse2t64 en Ubuntu 24.04)
          sudo apt-get install -y libfuse2t64
          curl -s https://mega.nz/linux/repo/xUbuntu_20.04/amd64/megacmd-xUbuntu_20.04_amd64.deb -o /tmp/megacmd.deb
          # Usar dpkg -i en lugar de apt-get install ./
          sudo dpkg -i /tmp/megacmd.deb
          # Corregir dependencias
          sudo apt-get install -f -y
          rm -f /tmp/megacmd.deb
          mega-version || echo "MEGAcmd instalado"

      - name: Subir backup a MEGA
        run: |
          mega-login "${{ secrets.MEGA_EMAIL }}" "${{ secrets.MEGA_PASSWORD }}"
          
          # Verificar si la carpeta existe, si no, crearla
          if ! mega-ls /Root/MSX-Backup/ >/dev/null 2>&1; then
            echo "üìÅ Creando carpeta MSX-Backup..."
            mega-mkdir "/Root/MSX-Backup"
          else
            echo "üìÅ Carpeta MSX-Backup ya existe"
          fi
          
          mega-put "$BACKUP_FILENAME" "/Root/MSX-Backup/"
          echo "‚úÖ Backup subido exitosamente: $BACKUP_FILENAME"
          mega-logout
        env:
          BACKUP_FILENAME: ${{ env.BACKUP_FILENAME }}

      - name: Limpiar backups antiguos (Mantener √∫ltimos 7 d√≠as)
        run: |
          set -e  # Salir inmediatamente si alg√∫n comando falla
          
          # Configurar zona horaria de Argentina para c√°lculos
          export TZ='America/Argentina/Buenos_Aires'
          
          FECHA_LIMITE=$(date -d "7 days ago" +%s)
          echo "üóëÔ∏è Eliminando backups anteriores a: $(date -d @$FECHA_LIMITE)"
          
          # Login a MEGA
          mega-login "${{ secrets.MEGA_EMAIL }}" "${{ secrets.MEGA_PASSWORD }}"
          
          # Obtener lista de archivos y procesarlos
          mega-ls /Root/MSX-Backup/ > /tmp/mega_files.txt || {
            echo "Error al listar archivos en MEGA"
            mega-logout
            exit 1
          }
          
          # Procesar archivo por archivo
          while IFS= read -r LINE; do
            # Verificar si la l√≠nea contiene un archivo de backup
            if [[ "$LINE" =~ MSX-Backup_([0-9]{4}-[0-9]{2}-[0-9]{2})_([0-9]{2}-[0-9]{2}-[0-9]{2})\.tar\.gz ]]; then
              FECHA_PARTE="${BASH_REMATCH[1]}"
              HORA_PARTE="${BASH_REMATCH[2]}"
              
              # Convertir formato de hora de HH-MM-SS a HH:MM:SS
              HORA_FORMATEADA="${HORA_PARTE//-/:}"
              FECHA_COMPLETA="${FECHA_PARTE} ${HORA_FORMATEADA}"
              
              echo "Procesando archivo: $LINE"
              echo "Fecha extra√≠da: $FECHA_COMPLETA"
              
              # Convertir fecha a timestamp (usando zona horaria argentina)
              TIMESTAMP_ARCHIVO=$(TZ='America/Argentina/Buenos_Aires' date -d "$FECHA_COMPLETA" +%s 2>/dev/null) || {
                echo "‚ö†Ô∏è No se pudo parsear la fecha para: $LINE"
                continue
              }
              
              # Comparar con fecha l√≠mite
              if [[ $TIMESTAMP_ARCHIVO -lt $FECHA_LIMITE ]]; then
                echo "üóëÔ∏è Eliminando archivo antiguo: $LINE"
                mega-rm "/Root/MSX-Backup/$LINE" || {
                  echo "‚ö†Ô∏è Error al eliminar: $LINE"
                  continue
                }
                echo "‚úÖ Eliminado: $LINE"
              else
                echo "‚è∞ Manteniendo archivo reciente: $LINE"
              fi
            else
              echo "‚ÑπÔ∏è Ignorando l√≠nea: $LINE"
            fi
          done < /tmp/mega_files.txt
          
          # Cleanup
          rm -f /tmp/mega_files.txt
          mega-logout
          echo "üßπ Limpieza completada"

      - name: Limpiar archivo local temporal
        run: rm -f "$BACKUP_FILENAME"
